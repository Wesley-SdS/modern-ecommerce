generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  passwordHash String
  role         UserRole  @default(CUSTOMER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  orders       Order[]
  auditLogs    AuditLog[]
  
  @@index([email])
  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  products  Product[]
  
  @@index([slug])
  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String   @db.Text
  priceCents  Int
  currency    String   @default("BRL")
  sku         String   @unique
  stock       Int      @default(0)
  images      Json     @default("[]")
  metadata    Json     @default("{}")
  categoryId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  category           Category?            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  inventoryMovements InventoryMovement[]
  
  @@index([slug])
  @@index([categoryId])
  @@index([sku])
  @@map("products")
}

model Banner {
  id        String   @id @default(cuid())
  imageUrl  String
  targetUrl String?
  position  Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([active, position])
  @@map("banners")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  totalCents      Int
  status          OrderStatus @default(PENDING)
  items           Json        @default("[]")
  paymentIntentId String?     @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountEntry  AccountEntry?
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model InventoryMovement {
  id        String              @id @default(cuid())
  productId String
  type      InventoryMovementType
  quantity  Int
  note      String?
  createdAt DateTime            @default(now())
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([createdAt])
  @@map("inventory_movements")
}

enum InventoryMovementType {
  ADD
  REMOVE
  SALE
  ADJUST
  RETURN
}

model AccountEntry {
  id              String            @id @default(cuid())
  type            AccountEntryType
  amountCents     Int
  dueDate         DateTime
  paidDate        DateTime?
  status          AccountEntryStatus @default(PENDING)
  description     String
  relatedOrderId  String?           @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  relatedOrder Order? @relation(fields: [relatedOrderId], references: [id], onDelete: SetNull)
  
  @@index([type])
  @@index([status])
  @@index([dueDate])
  @@map("account_entries")
}

enum AccountEntryType {
  RECEIVABLE
  PAYABLE
}

enum AccountEntryStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  actorId   String
  meta      Json     @default("{}")
  createdAt DateTime @default(now())
  
  actor User @relation(fields: [actorId], references: [id], onDelete: Cascade)
  
  @@index([actorId])
  @@index([createdAt])
  @@map("audit_logs")
}
